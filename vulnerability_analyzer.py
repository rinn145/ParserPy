import tkinter as tk
from tkinter import ttk, messagebox
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
import pandas as pd

class VulnerabilityAnalyzer:
    def __init__(self, master):
        self.root = master
        self.root.title("Анализ уязвимостей")
        self.apply_styles()

        self.frame = ttk.Frame(self.root)
        self.frame.pack(padx=20, pady=20)

        self.label_keyword = tk.Label(self.frame, text="Введите ключевое слово:")
        self.label_keyword.grid(row=0, column=0, padx=10, pady=5)
        self.entry_keyword = tk.Entry(self.frame, width=30)
        self.entry_keyword.grid(row=0, column=1, padx=10, pady=5)
        self.entry_keyword.focus()

        self.Button_find = tk.Button(self.frame, text='Найти', command=self.func_add)
        self.Button_find.grid(row=0, column=2, padx=10, pady=5)

        self.Button_clear = tk.Button(self.frame, text='Очистить', command=self.clear_entry)
        self.Button_clear.grid(row=0, column=3, padx=10, pady=5)

        self.label_result_K = tk.Label(self.frame, text="Критический", width=20)
        self.label_result_K.grid(row=1, column=0, padx=10, pady=5)
        self.label_result_K_R = tk.Label(self.frame, width=20, text='0')
        self.label_result_K_R.grid(row=1, column=1, padx=10, pady=5)
        self.label_result_H = tk.Label(self.frame, text="Высокий", width=20)
        self.label_result_H.grid(row=2, column=0, padx=10, pady=5)
        self.label_result_H_R = tk.Label(self.frame, width=20, text='0')
        self.label_result_H_R.grid(row=2, column=1, padx=10, pady=5)
        self.label_result_S = tk.Label(self.frame, text="Средний", width=20)
        self.label_result_S.grid(row=3, column=0, padx=10, pady=5)
        self.label_result_S_R = tk.Label(self.frame, width=20, text='0')
        self.label_result_S_R.grid(row=3, column=1, padx=10, pady=5)
        self.label_result_L = tk.Label(self.frame, text="Низкий", width=20)
        self.label_result_L.grid(row=4, column=0, padx=10, pady=5)
        self.label_result_L_R = tk.Label(self.frame, width=20, text='0')
        self.label_result_L_R.grid(row=4, column=1, padx=10, pady=5)

        self.chart_type_combo = ttk.Combobox(self.frame, values=["Круговая", "Столбчатая"], width=20, state="readonly")
        self.chart_type_combo.grid(row=0, column=4, padx=10, pady=5)
        self.chart_type_combo.current(0)

    def apply_styles(self):
        self.root.option_add('*Font', 'Helvetica 12')
        self.root.option_add('*Background', 'white')
        self.root.option_add('*Foreground', '#333')
        self.root.option_add('*BorderWidth', 2)

        style = ttk.Style()
        style.configure('TFrame', background='white')
        style.configure('TButton', background='#4CAF50', foreground='white', font=('Helvetica', 12), padding=10)

    def func_add(self):
        try:
            keyword = self.entry_keyword.get().strip()
            if not keyword:
                messagebox.showwarning("Пустое ключевое слово", "Пожалуйста, введите ключевое слово для поиска.")
                return

            threat_count_low = 0
            threat_count_medium = 0
            threat_count_high = 0
            threat_count_critical = 0

            df = pd.read_excel('vullist.xlsx', header=2)

            for index, row in df.iterrows():
                for column in df.columns:
                    if keyword.lower() in str(row[column]).lower() and pd.notna(row['Уровень опасности уязвимости']):
                        if "Низкий" in row['Уровень опасности уязвимости']:
                            threat_count_low += 1
                        elif "Средний" in row['Уровень опасности уязвимости']:
                            threat_count_medium += 1
                        elif "Высокий" in row['Уровень опасности уязвимости']:
                            threat_count_high += 1
                        elif "Критический" in row['Уровень опасности уязвимости']:
                            threat_count_critical += 1
                        break

            self.label_result_K_R.config(text=str(threat_count_critical))
            self.label_result_H_R.config(text=str(threat_count_high))
            self.label_result_S_R.config(text=str(threat_count_medium))
            self.label_result_L_R.config(text=str(threat_count_low))

            if self.chart_type_combo.get() == "Круговая":
                self.create_pie_chart(threat_count_critical, threat_count_high, threat_count_medium, threat_count_low)
            elif self.chart_type_combo.get() == "Столбчатая":
                self.create_bar_chart(threat_count_critical, threat_count_high, threat_count_medium, threat_count_low)

        except Exception as e:
            messagebox.showerror("Ошибка", f"Произошла ошибка: {e}")

    def create_pie_chart(self, threat_count_critical, threat_count_high, threat_count_medium, threat_count_low):
        try:
            labels = ['Критический', 'Высокий', 'Средний', 'Низкий']
            counts = [threat_count_critical, threat_count_high, threat_count_medium, threat_count_low]
            fig, ax = plt.subplots()
            ax.pie(counts, labels=labels, autopct='%1.1f%%', startangle=140)
            ax.axis('equal')
            self.plot_chart(fig)
        except Exception as e:
            messagebox.showerror("Ошибка", f"Произошла ошибка: {e}")

    def create_bar_chart(self, threat_count_critical, threat_count_high, threat_count_medium, threat_count_low):
        try:
            labels = ['Критический', 'Высокий', 'Средний', 'Низкий']
            counts = [threat_count_critical, threat_count_high, threat_count_medium, threat_count_low]
            fig, ax = plt.subplots()
            ax.bar(labels, counts, color=['red', 'orange', 'yellow', 'green'])
            self.plot_chart(fig)
        except Exception as e:
            messagebox.showerror("Ошибка", f"Произошла ошибка: {e}")

    def plot_chart(self, fig):
        try:
            canvas = FigureCanvasTkAgg(fig, master=self.frame)
            canvas.draw()
            canvas.get_tk_widget().grid(row=1, column=2, rowspan=5, padx=10, pady=10)
        except Exception as e:
            messagebox.showerror("Ошибка", f"Произошла ошибка: {e}")

    def clear_entry(self):
        self.entry_keyword.delete(0, tk.END)
